- 引入Bootstrap3:
	- 提供预编译版本和Bootstrap源码两个版本
	
	- 基本框架:
		<!DOCTYPE html>
		<html lang="zh-CN">
		  <head>
			<meta charset="utf-8">
			<meta http-equiv="X-UA-Compatible" content="IE=edge">
			<meta name="viewport" content="width=device-width, initial-scale=1">
			<!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ -->
			<title>标题</title>

			<!-- Bootstrap -->
			<link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">

			<!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 -->
			<!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 -->
			<!--[if lt IE 9]>
			  <script src="https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js"></script>
			  <script src="https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js"></script>
			<![endif]-->
		  </head>
		  <body>
			<h1>你好，世界！</h1>

			<!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) -->
			<script src="https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"></script>
			<!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 -->
			<script src="https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		  </body>
		</html>
	
	- 响应式布局: 
		Bootstrap 会自动帮你针对不同的屏幕尺寸调整你的页面，使其在各个尺寸的屏幕上表现良好。
		Bootstrap 是移动设备优先的。
		<meta name="viewport" content="width=device-width, initial-scale=1
		<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=yes" />   
			width=device-width ：表示宽度是设备屏幕的宽度
			initial-scale=1.0：表示初始的缩放比例
			minimum-scale=0.5：表示最小的缩放比例
			maximum-scale=2.0：表示最大的缩放比例
			user-scalable=yes：表示用户是否可以调整缩放比例
			
	- 基本变量: 
		定义了一个基础变量：baseFontFamily，假设其值为：font-size:14px;color:red;
		h1{@baseFontFamily}实际上最终把上面代码还原成：h1{font-size:14px;color:red;}
			
	- 容器
		Bootstrap 需要为页面内容和栅格系统包裹一个 .container 容器
		.container 类用于固定宽度并支持响应式布局的容器。
		.container-fluid 类用于 100% 宽度，占据全部视口（viewport）的容器。
		理解:
			container容器不止有15px的padding，还有一个会随着浏览器宽度变化而变化的margin,container-fluid容器就只有固定的15px的padding，并没有再加margin.
			container 类和container-fluid类的区别体现在是否有随视口宽度改变的margin存在。 
			container类所谓的自适应也是通过margin的改变来完成，container-fluid类的百分百宽度是指在固有的15px的padding前提下宽度总是当前视口的宽度。
		
	- 栅格:开始是堆叠在一起的，当大于阈值时将变为水平排列
		- “行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中，以便为其赋予合适的排列（aligment-对齐方式）和内补（padding）。
		- 通过“行（row）”在水平方向创建一组“列（column）”。
		- 你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。
		- 通过为“列（column）”设置 padding 属性，从而创建列与列之间的间隔（gutter）。通过为 .row 元素设置负值 margin 从而抵消掉为 .container 元素设置的 padding，也就间接为“行（row）”所包含的“列（column）”抵消掉了padding。
		- 栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 .col-xs-4 来创建。
		- 如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。
		
	- 媒体查询:
		- 在栅格系统中，我们在 Less 文件中使用以下媒体查询（media query）来创建关键的分界点阈值
			@media (max-width: @screen-xs-max) { ... }
			@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) { ... }
			@media (min-width: @screen-md-min) and (max-width: @screen-md-max) { ... }
			@media (min-width: @screen-lg-min) { ... }
		
		手机:xs
		平板:sm
		屏幕:md
		大屏幕:lg
		
	例一:
		<!-- Stack the columns on mobile by making one full-width and the other half-width -->
		<div class="row">
		  <div class="col-xs-12 col-md-8">1</div>
		  <div class="col-xs-6 col-md-4">2</div>
		</div>

		<!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop -->
		<div class="row">
		  <div class="col-xs-6 col-md-4">3</div>
		  <div class="col-xs-6 col-md-4">4</div>
		  <div class="col-xs-6 col-md-4">5</div>
		</div>

		<!-- Columns are always 50% wide, on mobile and desktop -->
		<div class="row">
		  <div class="col-xs-6">6</div>
		  <div class="col-xs-6">7</div>
		</div>	
	当屏幕是小屏时,使用col-xl,1单独一行,2单独一行左边一半,34一行左右各一半,5单独一行左边一半,67一行左右各一半
	当屏幕是桌面屏幕,使用col-md,12单独一行,345单独一行,67单独一行
	
	- 响应式列重置
		如果第一列内容很多,后三列内容很少,使用col-sm-3,当屏幕比较小时,会出现第三列和第四列不在一个水平线上,使用下面方法解决:
		  <div class="col-xs-6 col-sm-3">.col-xs-6 .col-sm-3</div>
		  <div class="col-xs-6 col-sm-3">.col-xs-6 .col-sm-3</div>

		  <div class="clearfix visible-xs-block"></div> -->添加该行代码(Add the extra clearfix for only the required viewport)

		  <div class="col-xs-6 col-sm-3">.col-xs-6 .col-sm-3</div>
		  <div class="col-xs-6 col-sm-3">.col-xs-6 .col-sm-3</div>
	
	- 列偏移
		.col-md-offset-0 类可以将md列向右侧偏移0(md和0可以修改)
		
	- 嵌套
		被嵌套的行（row）所包含的列（column）的个数不能超过12
		<div class="row">
		  <div class="col-sm-9">
			Level 1: .col-sm-9
			<div class="row">
			  <div class="col-xs-8 col-sm-6">
				Level 2: .col-xs-8 .col-sm-6
			  </div>
			  <div class="col-xs-4 col-sm-6">
				Level 2: .col-xs-4 .col-sm-6
			  </div>
			</div>
		  </div>
		</div>	
	
	- 列补偿
		col-md-offset-3（在左侧补充3列）
		col-md-push-8（从左侧往右侧推8列）
		col-md-pull-2（往左侧拉2列）	
		
	- Less mixin 和变量 (未看)
	
-排版	
	- 标题
		HTML 中的所有标题标签，<h1> 到 <h6> 均可使用。另外，还提供了 .h1 到 .h6 类，为的是给内联（inline）属性的文本赋予标题的样式。
	- 副标题(其内的文本将被设置为父容器字体大小的 85%)
		在标题内还可以包含 <small> 标签或赋予 .small 类的元素，可以用来标记副标题。
	- 页面主体
		Bootstrap 将全局 font-size 设置为 14px，line-height 设置为 1.428。这些属性直接赋予 <body> 元素和所有段落元素。另外，<p> （段落）元素还被设置了等于 1/2 行高（即 10px）的底部外边距（margin）	
	- 突出(加大加粗加黑)
		通过添加 .lead 类可以让段落突出显示。
	- 标记文本(高亮)
		<mark>highlight</mark>
	- 被删除文本(<del>或者<s>)
		<del>This line of text is meant to be treated as deleted text.</del>
	- 插入文本(带下划线<ins>或者<u>)
		<u>This line of text will render as underlined</u>
	- 加粗(<strong>或者<b>)
		<strong>rendered as bold text</strong>
	- 斜体(<em>或者<i>)
		<em>rendered as italicized text</em>
	-对齐
		<p class="text-left">向左对齐文本</p>
		<p class="text-center">居中对齐文本</p>
		<p class="text-right">向右对齐文本</p>
		<p class="text-muted">本行内容是减弱的</p>
		<p class="text-primary">本行内容带有一个 primary class</p>  -->字体带颜色
		<p class="text-success">本行内容带有一个 success class</p>  -->字体带颜色
		<p class="text-info">本行内容带有一个 info class</p>        -->字体带颜色
		<p class="text-warning">本行内容带有一个 warning class</p>  -->字体带颜色
		<p class="text-danger">本行内容带有一个 danger class</p>    -->字体带颜色
	- 改变大小写
		<p class="text-lowercase">Lowercased text.</p>   -->全部小写
		<p class="text-uppercase">Uppercased text.</p>   -->全部大写
		<p class="text-capitalize">Capitalized text.</p> -->首字母大写
	- 换行
		<br>
	- 引用(
		- 添加 <footer> 用于标明引用来源。来源的名称可以包裹进 <cite>标签中。
		- 通过赋予 .blockquote-reverse 类可以让引用呈现内容右对齐的效果
		<blockquote class="blockquote-reverse">
		  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</p>
		  <footer>Someone famous in <cite title="Source Title">Source Title</cite></footer>
		</blockquote>
	- 缩略语(当鼠标悬停在缩写和缩写词上时就会显示完整内容)
		<p><abbr title="Phone">P:</abbr> (123) 456-7890</p>  -->鼠标放上去右下角显示title的内容
	- 无序列表
		- 添加class="list-unstyled"可以变成无样式列表
		<ul class="list-unstyled">
		  <li>...</li>
		</ul>
		- 内联列表(导航条)
			通过设置 display: inline-block; 并添加少量的内补（padding），将所有元素放置于同一行。
			<ul class="list-inline">
			  <li>...</li>
			</ul>
	- 描述
		- .dl-horizontal 可以让 <dl> 内的短语及其描述排在一行。开始是像 <dl> 的默认样式堆叠在一起，随着导航条逐渐展开而排列在一行。
		<dl>
		  <dt>...</dt>  ->短语:会加黑
		  <dd>...</dd>  ->描述
		</dl>
	- 内联代码
		<code>&lt;section&gt;</code>    --><section>注意转义字符
	- 代码块
		多行代码使用<pre>
	- 键盘输入
		键入 <kbd>quit</kbd> 来退出程序，或者键入 <kbd>menu</kbd> 来返回主菜单。 -->quit和menu有特殊格式
	- 变量标记
		通过 <var> 标签标记变量
	- 表格
		<table class="table">
		  ...
		</table>
		- 隔行换色:table-striped
		- 带边框:table-bordered
		- 鼠标悬停:table-hover       -->鼠标放上去变色
		- 紧缩表格:table-condensed   -->单元格中的内补（padding）均会减半
		- 设置单元格颜色
			.active	    鼠标悬停在行或单元格上时所设置的颜色  -->灰
			.success	标识成功或积极的动作                  -->浅绿
			.info	    标识普通的提示信息或动作              -->浅蓝
			.warning	标识警告或需要用户注意                -->浅黄
			.danger	    标识危险或潜在的带来负面影响的动作    -->浅红
	- 响应式表格	
		将任何 .table 元素包裹在 .table-responsive 元素内，即可创建响应式表格，其会在小屏幕设备上（小于768px）水平滚动。当屏幕大于 768px 宽度时，水平滚动条消失。
		<div class="table-responsive">
		  <table class="table">
			...
		  </table>
		</div>
	- 表单
		- 设置.form-control 类的 <input>、<textarea> 和 <select> 元素都将被默认设置宽度属性为 width: 100%;。 
		- 将 label 元素和前面提到的控件包裹在 .form-group 中可以获得最好的排列。
			<form>
			  <div class="form-group">
				<label for="exampleInputEmail1">Email address</label>
				<input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">   -->form-control
			  </div>
			  <div class="form-group">
				<label for="exampleInputFile">File input</label>
				<input type="file" id="exampleInputFile">
				<p class="help-block">Example block-level help text here.</p>
			  </div>
			  <div class="checkbox">
				<label>
				  <input type="checkbox"> Check me out
				</label>
			  </div>
			  <button type="submit" class="btn btn-default">Submit</button>
			</form>
	- 内联表单
		- form-inline 类可使其内容左对齐并且表现为 inline-block 级别的控件,width:auto-->可以根据要求设置
		- 一定要label标签,不过可以通过为 label 设置 .sr-only 类将其隐藏
		<form class="form-inline">
		  <div class="form-group">
			<label for="exampleInputName2">Name</label>
			<input type="text" class="form-control" id="exampleInputName2" placeholder="Jane Doe">
		  </div>
		  <div class="form-group">
			<label for="exampleInputEmail2">Email</label>
			<input type="email" class="form-control" id="exampleInputEmail2" placeholder="jane.doe@example.com">
		  </div>
		  <button type="submit" class="btn btn-default">Send invitation</button>
		</form>
	- 输入框组(比如用户名后的头像)
		<div class="input-group">
		  <div class="input-group-addon">$</div>
		  <input type="text" class="form-control" id="exampleInputAmount" placeholder="Amount">
		  <div class="input-group-addon">.00</div>
		</div>
	- 水平排列的表单 ----->????????
		http://v3.bootcss.com/css/#type-abbreviations
	- type类型
		text、password、datetime、datetime-local、date、month、time、week、number、email、url、search、tel 和 color
	- 多行
		row="3"
	- 多选和单选框
		<div class="checkbox">
		  <label>
			<input type="checkbox" value="">
			Option one is this and that&mdash;be sure to include why it's great  -->点击文字也可以选择
		  </label>
		</div>
		<div class="radio">
		  <label>
			<input type="radio" name="optionsRadios" id="optionsRadios1" value="option1" checked>
			Option one is this and that&mdash;be sure to include why it's great
		  </label>
		</div>
	- 内联单选和多选框:checkbox-inline 或 radio-inline
		<label class="checkbox-inline">
		  <input type="checkbox" id="inlineCheckbox3" value="option3"> 3
		</label>

		<label class="radio-inline">
		  <input type="radio" name="inlineRadioOptions" id="inlineRadio1" value="option1"> 1
		</label>
	- 下拉列表（select）
		- 标记了 multiple 属性的 <select> 控件来说，默认显示多选项
		<select class="form-control"> -->宽度100%
		  <option>1</option>
		  <option>2</option>
		  <option>3</option>
		  <option>4</option>
		  <option>5</option>
		</select>
	- 静态控件(静态内联和输入框垂直居中)
		如果需要在表单中将一行纯文本和 label 元素放置于同一行，为 <p> 元素添加 .form-control-static 类即可
	- 禁用(disabled)
		<input class="form-control" id="disabledInput" type="text" placeholder="Disabled input here..." disabled>
		- 为<fieldset> 设置 disabled 属性,可以禁用 <fieldset> 中包含的所有控件。
	- 只读状态: readonly
	- Help text  class="help-block"   -->显示文字偏浅	
	- 校验状态
		- Bootstrap 对表单控件的校验状态，如 error、warning 和 success 状态，都定义了样式。使用时，添加 .has-warning、.has-error 或 .has-success 类到这些控件的父元素即可。
		- 任何包含在此元素之内的 .control-label、.form-control 和 .help-block 元素都将接受这些校验状态的样式。
	- 针对校验状态添加额外图标,例如对勾等
		只需设置相应的 .has-feedback 类并添加正确的图标即可。反馈图标（feedback icon）只能使用在文本输入框 <input class="form-control"> 元素上
		<div class="form-group has-success has-feedback">  
		  <label class="control-label" for="inputSuccess2">Input with success</label>
		  <input type="text" class="form-control" id="inputSuccess2" aria-describedby="inputSuccess2Status">
		  <span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"></span>
		  <span id="inputSuccess2Status" class="sr-only">(success)</span>
		</div>
	- 控件尺寸 placeholder="Default input"
		input-lg 
		Default input 
		input-sm 
	- 水平排列的表单组的尺寸
		通过添加 .form-group-lg 或 .form-group-sm 类，为 .form-horizontal 包裹的 label 元素和表单控件快速设置尺寸。	
	- 调整列（column）尺寸	
		<div class="col-xs-3">
			<input type="text" class="form-control" placeholder=".col-xs-3">
		</div>
	- 按钮预定义样式
		<button type="button" class="btn btn-default">（默认样式）Default</button>
		<button type="button" class="btn btn-primary">（首选项）Primary</button>
		<button type="button" class="btn btn-success">（成功）Success</button>
		<button type="button" class="btn btn-info">（一般信息）Info</button>
		<button type="button" class="btn btn-warning">（警告）Warning</button>
		<button type="button" class="btn btn-danger">（危险）Danger</button>
		<button type="button" class="btn btn-link">（链接）Link</button>
	- 按钮大小
		  <button type="button" class="btn btn-default btn-lg">大的按钮</button>
		  <button type="button" class="btn btn-default">默认大小的按钮</button>
		  <button type="button" class="btn btn-default btn-sm">小的按钮</button>
		  <button type="button" class="btn btn-default btn-xs">特别小的按钮</button>
		  <button type="button" class="btn btn-default btn-lg btn-block">块级的按钮</button>
	- 激活状态
		active
	- 基于a标签创建按键
		<a href="#" class="btn btn-primary btn-lg active" role="button">Primary link</a>
	- 无法点击
		按钮的背景设置 opacity 属性就可以呈现出无法点击的效果
	- 禁用
		为 <button> 元素添加 disabled 属性，使其表现出禁用状态
		<button type="button" class="btn btn-default btn-lg" disabled="disabled">Button</button>
	- 响应式图片
		<img src="..." class="img-responsive" alt="Responsive image">
	- 图片形状
		<img src="..." alt="..." class="img-rounded">
		<img src="..." alt="..." class="img-circle">
		<img src="..." alt="..." class="img-thumbnail">
	- 情境文本颜色
		<p class="text-muted">...</p>
		<p class="text-primary">...</p>
		<p class="text-success">...</p>
		<p class="text-info">...</p>
		<p class="text-warning">...</p>
		<p class="text-danger">...</p>
	- 情境背景颜色
		<p class="bg-primary">...</p>
		<p class="bg-success">...</p>
		<p class="bg-info">...</p>
		<p class="bg-warning">...</p>
		<p class="bg-danger">...</p>	
	- 关闭按钮  -->右上角,放上去鼠标变成手
		<button type="button" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button>
	- 三角符号  -->下拉菜单
		<span class="caret"></span>
	- 左右浮动
		<div class="pull-left">...</div>
		<div class="pull-right">...</div>
		- 排列导航条中的组件时可以使用这些工具类：.navbar-left 或 .navbar-right
	- 让内容块居中
		为任意元素设置 display: block 属性并通过 margin 属性让其中的内容居中	
	- 清除浮动
		通过为父元素添加 .clearfix 类可以很容易地清除浮动（float）
	- 显示或隐藏内容
		.show 和 .hidden 类可以强制任意元素显示或隐藏(对于屏幕阅读器也能起效)	
	- 键盘导航
		.sr-only 和 .sr-only-focusable 联合使用的话可以在元素有焦点的时候再次显示出来
		<a class="sr-only sr-only-focusable" href="#content">Skip to main content</a>	
	- 图片替换--->??????
		使用 .text-hide 类或对应的 mixin 可以用来将元素的文本内容替换为一张背景图。
		<h1 class="text-hide">Custom heading</h1>	
	- 打印类
		.hidden-print         --> 针对打印机隐藏,针对浏览器显示
		.visible-print-block  --> 也有针对浏览器隐藏,针对打印机显示的
		.visible-print-inline
		.visible-print-inline-block
			
	- 响应式工具
	- 使用 Less  	
	- 实用工具 mixin	
		
		
		
		
		
		
		
		
		
		
		