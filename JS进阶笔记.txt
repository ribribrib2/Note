银角大王博客：https://www.cnblogs.com/wupeiqi/articles/5602773.html
浏览器的console中换行使用shift+enter

1、作业
	a、网上找模板
		BootStrap
	b、背景图片
		整个页面添加背景图片直接添加在body中
	
2、页面布局
	-主站布局
	
	
	
	
	8、函数
	function func(arg){
		return arg + 1;
	}
	var result = func(1)
	console.log(result);
	
	普通函数:
		function func(){
		}
		
	匿名函数:
		setInterval(function(){
			console.log(123);
		},5000)         没有函数名
		
	自执行函数:(创建函数并自动执行)
		function func(arg){
			console.log(arg);
		}
		func(1);
		等效于:
		(function(arg)){
			console.log(arg);
		}(1)
		
	9、序列化
		数据库返回字符串,转换成数组.
		s = JSON.stringify(obj)  将对象转换成字符串
		l = JSON.parse(str)      将字符串转换成对象类型
		
	10、转义
		将数据经过转义后，保存在cookie中。
		
		decodeURI( )                   URl中未转义的字符
		decodeURIComponent( )          URI组件中的未转义字符
		encodeURI( )                   URI中的转义字符
		encodeURIComponent( )          转义URI组件中的字符
		escape( )                      对字符串转义
		unescape( )                    给转义字符串解码
		URIError                       由URl的编码和解码方法抛出
		
		url = 'https://www.sogou.com/web?query=%E7%90%86%E8%A7%A3'
		new_url = decodeURI(url)
		new_url = "https://www.sogou.com/web?query=理解"
		url = encodeURI(new_url);
		url = "https://www.sogou.com/web?query=%E7%90%86%E8%A7%A3"
		other_url = encodeURIComponent(new_url);
		other_url = "https%3A%2F%2Fwww.sogou.com%2Fweb%3Fquery%3D%E7%90%86%E8%A7%A3"
		
	11、eval
		excel中8*8
		s = 8*8
		val = eval(s)
		
		python中:
			val = eval(表达式)
				  exec(执行代码)
				  
		JavaScript:
			JavaScript中的eval是Python中eval和exec的合集，既可以编译代码也可以获取返回值。
			
	12、时间
		Data类
		var d = new Data()
		d.getxxx 获取
		d.setxxx 设置
		
	13、作用域
		1、以函数作为作用域
			其他语言:   以代码块为作用域 
						public void Func(){
							if(1 == 1){
								string name = 'java'
							}
							console.write(name)
						}
						//报错   {}为一个代码块
						
			python:     以函数作为作用域
				情况一:
					def func():
						if 1 == 1:
							name = '123'
							print(name)
					func()
					//正常运行
					
				情况二:
					def func():
						if 1 == 1:
							name = '123'
							print(name)
					func()
					print(name)
					//报错
					
			JavaScript: 以函数作为作用域
				function func() {
					if (1 == 1) {
						var name = 'JavaScript'
					}
				}
				func()
				
		2、函数的作用域在函数未被调用之前就被创建
			function func() {
				if (1 == 1) {
					var name = 'JavaScript'
				}
			}
			
		3、函数的作用域存在作用域链,并且也是在被调用之前创建		
		示例一:
			xo = '123';
			function func(){
				var xo = '456';
				function inner(){
					var xo = '789'; 
					console.log(xo);
				}
			}
			inner()
			输出789.
		示例二:
			xo = '123';
			function func(){
				var xo = '456';
				function inner(){
					console.log(xo);
				}
				return inner;
			}
			var ret = func()
			ret()
			输出456.

		4、函数内局部变量提前声明		
			function func(){
				console.log(s);
				var s = '123';
			}
			解释过程中: var s;
						然后再执行到var s = '123';再赋值
			所以上面函数如果执行func()会提示undefined.
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	